#!/usr/bin/env python3

import subprocess
import sys
import json
import os
import re


def main():
    cp = subprocess.run(["jupyter", "kernelspec", "list", "--json"], stdout=subprocess.PIPE)
    if cp.returncode != 0:
        return sys.exit(cp.returncode)

    for name, spec in json.loads(cp.stdout)["kernelspecs"].items():
        if not os.path.isfile(spec["spec"]["argv"][0]):
            subprocess.run(["jupyter", "kernelspec", "uninstall", "-f", name])

    cp = subprocess.run(["conda", "config", "--show", "root_prefix"], stdout=subprocess.PIPE)
    if cp.returncode != 0:
        return sys.exit(cp.returncode)

    prefix = re.split(r"\s*:\s*", cp.stdout.decode())[1].strip()

    cp = subprocess.run(["conda", "env", "list", "--json"], stdout=subprocess.PIPE)
    if cp.returncode != 0:
        return sys.exit(cp.returncode)
    envs = json.loads(cp.stdout)['envs']

    for env in envs:
        if env == prefix:
            continue

        exe = os.path.join(env, "bin", "python")
        cp = subprocess.run([exe, "-m", "ipykernel", "--version"], capture_output=True)
        if cp.returncode != 0:
            continue

        name = os.path.basename(env)

        version = subprocess.run(
            [exe, "-c", "import platform; print(platform.python_version())"],
            capture_output=True)
        if cp.returncode != 0:
            continue

        subprocess.run(
            [
                exe, "-m", "ipykernel", "install", "--user", "--name={}".format(name),
                "--display-name={}({})".format(version.stdout.decode().strip(), name),
            ])


if __name__ == "__main__":
    main()
